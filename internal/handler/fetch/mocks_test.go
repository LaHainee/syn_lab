// Code generated by MockGen. DO NOT EDIT.
// Source: contact.go
//
// Generated by this command:
//
//	mockgen -source contact.go -destination mocks_test.go -package fetch_test
//

// Package fetch_test is a generated GoMock package.
package fetch_test

import (
	model "contacts/internal/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *Mockstorage) Fetch() ([]model.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch")
	ret0, _ := ret[0].([]model.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockstorageMockRecorder) Fetch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*Mockstorage)(nil).Fetch))
}

// FetchByUuid mocks base method.
func (m *Mockstorage) FetchByUuid(uuid string) (model.Contact, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchByUuid", uuid)
	ret0, _ := ret[0].(model.Contact)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchByUuid indicates an expected call of FetchByUuid.
func (mr *MockstorageMockRecorder) FetchByUuid(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchByUuid", reflect.TypeOf((*Mockstorage)(nil).FetchByUuid), uuid)
}
